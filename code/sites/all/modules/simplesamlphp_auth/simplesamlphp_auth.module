<?php

/*
 * simpleSAMLphp authentication module for Drupal.
 * 
 * (c) UNINETT, Andreas Åkre Solberg, <andreas.solberg@uninett.no>. http://rnd.feide.no
 *
 * This authentication module is based on the shibboleth authentication module, with changes
 * to adopt to use simpleSAMLphp.
 *
 * Homepage of this project: http://code.google.com/p/drupalsimplesaml/
 *
 * Original Author:
 * Andreas Åkre Solberg, <andreas.solberg@uninett.no>
 *
 * Maintainer: 
 * Steve Moitozo, <steve_moitozo@sil.org>
 * 
 * Contributors:
 * Snorre Løvås, <snorre.lovas@uninett.no>
 * Matt Pasiewicz, <autodidactic.one@gmail.com>
 * Thomas Kulvik, <thomas@nymedia.no>
 *
 * 20110202, Steve Moitozo, modified to function properly with Drupal 7.x
 *
 * ISSUES and TODOs:
 *	- ISSUE: User is always dropped on user page after login, instead of where they were when they clicked "Federated Log In"
 *               Because of this, deep linking to access controlled content does not work.
 *               Usability would be considerably increased if this were resolved.
 *	- FYI: Drupal now requires knowledge of the local user password in order to change e-mail address, etc. 
 *             This could be an issue for users of accounts that are autoprovisioned by this module, though Drupal does give
 *		users the ability to reset their password to something they know via the Request new password feature
 *	- KLUDGE: Drupal does not kill the session on logout, even with drupal_session_destroy_uid(), so I had to use session_destroy()
 *      - TODO: rework the default login limitation logic to use a drupal permission rather
 *        than a list of UIDs.
 *      - TODO: when denying access because the administrator has chosen not to allow the module
 *        to register/create accounts, the user is told to contact the administrator; the
 *        message should provide the contact information
 *      - ISSUE: until Drupal issue #754560 is resolved users will not see logout notices
 */

/**
 * Implementation of hook_menu().
 */
function simplesamlphp_auth_menu() {

    $items = array();

    $items['admin/config/people/simplesamlphp_auth'] = array(
          'title'              => t('simpleSAMLphp authentication module settings'),
          'description'        => t('Control the various settings of the simpleSAMLphp authentication module'),
          'page callback'      => 'drupal_get_form',
          'page arguments'     => array('simplesamlphp_auth_settings'),
          'access arguments'   => array('administer simpleSAMLphp authentication'),
          'type'               => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        );

    $items['user/login/nbcu'] = array(
          'title'              => t('Logon to the site'),
          'description'        => t('Provides a site login page'),
          'page callback'      => 'simplesamlphp_auth_loginpage',
          'access callback' => TRUE,
          'type'               => MENU_CALLBACK,
        );  
   
    return $items;
}



/**
 * Implements hook_admin_paths().
 */
function simplesamlphp_auth_admin_paths() {

  $paths = array('admin/config/people/simplesamlphp_auth' => TRUE);
  return $paths;
}




/**
 * Implementation of hook_help().
 */
function simplesamlphp_auth_help($path, $arg) {

  switch ($path) {
    case 'admin/config/people/simplesamlphp_auth':
	$output = t('<p>This module integrates Drupal with a SimpleSAMLphp Service Point (SP), effectively federating Drupal.</p>');
        $output .= t('<p></p>');

	return $output;
  }
}




/**
 * Implementation of hook_permission().
 */
function simplesamlphp_auth_permission() {

  return array( 
    'administer simpleSAMLphp authentication' => array(
    'title' => t('Administer simpleSAMLphp authentication')
    )
  );
}



function simplesamlphp_auth_loginpage(){
  global $user;
  global $as;
  global $saml_attributes;

  $output = null;
  if ($user->uid == 0 ) {
   if ($user->uid == 0) {
     /* Record the current location. */
     
     if($_GET['destination']){
       $url = $_GET['destination'];
     }else{
       $url = $_SERVER['HTTP_REFERER'];
     }
     
     setrawcookie('saml_redirect_url', $url, REQUEST_TIME + 60, '/');

     /* Require the user to be authentcated. */
       $as->requireAuth();
     } else {
       $output .= t('Looks like you\'re already logged in. ');
       $output .= t('Perhaps you logged into Drupal using a local account?');
     }
    } else {
      $ssp_redirurl = 'user/' . $user->uid;

      /* see if we know were to send the user */
      
      if(isset($_COOKIE['saml_redirect_url']) &&
        $_COOKIE['saml_redirect_url']){
        $ssp_redirurl = $_COOKIE['saml_redirect_url'];

        /* clean out the URL */
        setrawcookie('saml_redirect_url', '', 0, '/');
     }

     /* send the user on their way */
     drupal_goto($ssp_redirurl);
    }
  
  return $output;
}



/**
 * Implementation of hook_init().
 */
function simplesamlphp_auth_init() { 
  global $user;
  global $as;
  global $saml_attributes;
  global $saml_config; 
  global $saml_version; 
     
   //get the simplesamlphp session
  $saml_env = variable_get('saml_env');
  
  switch($saml_env){
    case 'move_dev':
      $service_provider = 'nbcu-staging-sp';
      break;
    case 'move_test':
      $service_provider = 'nbcu-staging-sp';
      break;
    case 'move_live':
      $service_provider = 'nbcu-live-sp';
      break;
  }
  
  $basedir = 'private/simplesamlphp';
  require_once($basedir . '/lib/_autoload.php');
  
  $saml_config = SimpleSAML_Configuration::getInstance();
  $saml_version = $saml_config->getVersion();
  
  
  /* Load simpleSAMLphp, configuration and metadata */
  $as = new SimpleSAML_Auth_Simple($service_provider);
  $saml_attributes = $as->getAttributes();
  
  if ($user->uid == 0) {

    // user is not logged in - Drupal
    if ($as->isAuthenticated()) {
        //user is logged in - SimpleSAMLphp, user is not logged in - Drupal
        
        //get unique identifier from saml attributes
        $authname = _simplesamlphp_auth_get_authname();

        _simplesaml_auth_debug('Authname is [' .$authname . '] userid is [' . $user->uid . ']');

        if (!empty($authname)) {
          // User is logged in with SAML authentication and we got the unique identifier.
          // Try to log into Drupal. 
          _simplesaml_auth_debug('Load user [' .$authname . ']');
	  
	  // Retrieve user mapping and attempt to log the user in.
          $ext_user = user_external_load($authname);
 
          if (!$ext_user) {

	     // First we check the admin settings for simpleSAMLphp and find out if we are allowed to register users.
	     if (variable_get('simplesamlphp_auth_registerusers', TRUE)){
	     
		// We are allowed to register new users. 
		_simplesaml_auth_debug('Register user [' . $authname . ']');
		user_external_login_register($authname, 'simplesamlphp_auth');
		
                watchdog('simplesaml_php',print_r($saml_attributes,true));
                
		if ($user) {
		   //populate roles based on configuration setting
		   $roles = _simplesamlphp_auth_rolepopulation(variable_get('simplesamlphp_auth_rolepopulation', ''));
                   $roles[4] = 'NBCUniversal Employee';
		   $userinfo = array('roles' => $roles);
                   $userinfo['field_full_name']['und'][0]['value'] = $saml_attributes['FirstName'][0].' '.$saml_attributes['LastName'][0]; 
                   
		   $user = user_save($user, $userinfo); // TODO - Fjernet rolle-delen her da den gav en bra feilmelding når roller ikke finnes ;) 
		}
		
		$msg = t("Welcome. Since this is your first time logging in, we've automatically provisioned an account for you.");
		drupal_set_message($msg, 'status');

	     } else{
	     
		// We are not allowed to register new users on the site through simpleSAML.
		// We let the user know about this and redirect to the user/login page.
		$msg = t('We are sorry. While you have successfully authenticated, you are not yet entitled to access this site. 
		Please ask the site administrator to provision access for you.');
		drupal_set_message($msg);
		$as->logout('/?msg=' . $msg);
	     }

          } else {
	    // If successfully logged into Drupal
            // see if we're supposed to re-evaluate role assignments
	    	    
            if (variable_get('simplesamlphp_auth_roleevaleverytime', 0)) {
               // if the user is already registered
               // update the roles
               //populate roles based on configuration setting
               _simplesaml_auth_debug('User already registered [' . $authname . '] updating roles.');
               $roles = _simplesamlphp_auth_rolepopulation(variable_get('simplesamlphp_auth_rolepopulation', ''));
               $userinfo = array('roles' => $roles);
	       
	       // save the updated roles and populate the user object
               $user = user_save($ext_user, $userinfo);
	       
            }else{
	       // no need to evaluate roles, populate the user object
	       $user = $ext_user;
	    }
		
	    $msg = t("Welcome back.");
	    drupal_set_message($msg, 'status');

          }
          //finalizing the login, calls hook_user op login
          $edit = array();
          user_login_finalize($edit);

        } // end if !empty authname
           
    } //end if isset saml_session
    
  }else{
  // the user is already logged into Drupal
        
      // if we forbid users from loggin in using local accounts
      if(false == variable_get('simplesamlphp_auth_allowdefaultlogin', '')){

	  // if the user has NOT been authenticated via simpleSAML
	  if (!$as->isAuthenticated()){

	      //:FYI: Until Drupal issue #754560 is corrected this message will never be seen by the user
	      drupal_set_message(t("We are sorry, users are not permitted to log in using local accounts."));

	      // destroy the user's session (log them out)
	      _simplesamlphp_auth_destroy_drupal_session();
	  }

      }else{
	  // if we are allowing users to log in with local accounts

	  // if the user has NOT been authenticated via simpleSAML
	  if (!$as->isAuthenticated()){

	  // see if we limit this privilege to specified users
	  $strAllwDefLogUsers = variable_get('simplesamlphp_auth_allowdefaultloginusers', '');
	  $arrAllwDefLogUsers = array();

	      // if user IDs are specified, we let them in, but everyone else gets logged out
	      if(strlen($strAllwDefLogUsers)){

		 // :TODO: perform a test to make sure that only numbers, spaces, or commas are in the string

		 // convert the string into an array
		 $arrAllwDefLogUsers = explode(',',$strAllwDefLogUsers);

		 // if we still have something to work with
		 if(0 < count($arrAllwDefLogUsers)){
		     // log the user out of Drupal if the current user's uid is NOT in the list of allowed uids
		     if(!in_array($user->uid, $arrAllwDefLogUsers)){
		         // User is logged into Drupal, but may not be logged into simpleSAML. 
		         // If this is the case we're supposed to log the user out of Drupal.

			 //:FYI: Until Drupal issue #754560 is corrected this message will never be seen by the user
			 drupal_set_message(t("We are sorry, you are not permitted to log in using a local account."));

			 _simplesamlphp_auth_destroy_drupal_session();
		     }
		 }

	      }// test for specified users

	  }// end if $as->isAuthenticated()

      }//end test to see if we allow default logins

   }//end if user->uid  
}



/**
 * Implementation of hook_user_insert().
 */
function simplesamlphp_auth_user_insert(&$edit, $account, $category = NULL) {
    global $as;
    global $saml_attributes; 
    
    if ($category = 'account') {
      //if user registration has a valid session

      if ($as->isAuthenticated()) {
          //Get name from default attributes                                   

          try {
              _simplesaml_auth_debug('Registering user [' . $account->name . ']');
              $account->name = _simplesamlphp_auth_get_default_name($account->uid);
          } catch (Exception $e) {  
              $message = t('Username is missing.' . $e->getMessage());
              drupal_set_message($message, "error");
              watchdog('simplesamlphp', $message, WATCHDOG_CRITICAL);            
          }

          db_update('users')
              ->fields(array('name' => $account->name))
              ->condition('uid', $account->uid)
              ->execute();

          _simplesaml_auth_debug('Updating username [' . $account->name . ']');

          //Get mail from default attribute
          try {
              $mail_address = _simplesamlphp_auth_get_mail();
          } catch (Exception $e)  {   
              $message = t('Email is missing.' . $e->getMessage()); 
              drupal_set_message($message, "error");
              watchdog('simplesamlphp', $message, WATCHDOG_CRITICAL);
          }

          if (!empty($mail_address)) {
              db_update('users')
                  ->fields(array('mail' => $mail_address))
                  ->condition('uid', $account->uid)
                  ->execute();
          }

          _simplesaml_auth_debug('Updating mail [' . $mail_address . ']');
      }

    }
}



/**
 * Implementation of hook_user_logout().
 */
function simplesamlphp_auth_user_logout($account) {    

    global $user; 
    global $as; 
    global $saml_attributes; 

    if (!empty($saml_attributes)) {

        $config = SimpleSAML_Configuration::getInstance();
        $msg = 'with_slo';

        try {
          $slo = $config->getString('SingleLogoutService');
        } catch(Exception $e) {                          
            $msg = "no_slo";
        }
	
	// :KLUDGE: for some reason Drupal is not killing the session, even if I were to call drupal_session_destroy_uid() here.
	session_destroy();

        $as->logout('/?msg=' . $msg);

    }
    
}



/**
 * Implementation of hook_user_delete().
 */
function simplesamlphp_auth_user_delete($account) {
    
    db_delete('authmap')
        ->condition('uid', $account->uid)
        ->condition('authname', $account->name)
        ->execute();
}



/**
 * Implementation of settings
 */
function simplesamlphp_auth_settings() {

    global $saml_version; 
    
    if (!empty($saml_version )) {
        $ver = explode('.',$saml_version);
        if ($ver[0] >= 1 && $ver[1] >= 5) {
            // commented because it shows multiple times
            //drupal_set_message('Thanks for using SimpleSAMLphp');
        } else {
            drupal_set_message('Please upgrade SimpleSAMLphp. You are using '.$saml_version,'warning');
        }
    }
    
    $form = array(
    
        'simplesamlphp_auth_installdir' => array(
            '#type' => 'textfield',
            '#title' => t('Instalation directory (default: /var/simplesamlphp)'),
            '#default_value' => variable_get('simplesamlphp_auth_installdir', '/var/simplesamlphp'),
            '#description' => t('The base directory of simpleSAMLphp. Absolute path with no trailing slash.'),
        ),
        
        'simplesamlphp_auth_authsource' => array(
            '#type' => 'textfield',
            '#title' => t('Autenticaton source for this SP (default: default-sp)'),
            '#default_value' => variable_get('simplesamlphp_auth_authsource', 'default-sp'),
            '#description' => t('The name of the source to use from /var/simplesamlphp/config/authsources.php'),
        ),

	'simplesamlphp_auth_user_name' => array(
            '#type' => 'textfield',
            '#title' => t('Which attribute from simpleSAMLphp should be used as user\'s name'),
            '#default_value' => variable_get('simplesamlphp_auth_user_name', 'eduPersonPrincipalName'),
            '#description' => t('Example: <i>eduPersonPrincipalName</i> or <i>displayName</i><br />If the attribute is multivalued, the first value will be used.'),
            '#required' => TRUE,
	),

        'simplesamlphp_auth_unique_id' => array(
            '#type' => 'textfield',
            '#title' => t('Which attribute from simpleSAMLphp should be used as unique identifier for the user'),
            '#default_value' => variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName'),
            '#description' => t('Example: <i>eduPersonPrincipalName</i> or <i>eduPersonTargetedID</i><br />If the attribute is multivalued, the first value will be used.'),
            '#required' => TRUE,
	),

        'simplesamlphp_auth_mailattr' => array(
            '#type' => 'textfield',
            '#title' => t('Which attribute from simpleSAMLphp should be used as user mail address'),
            '#default_value' => variable_get('simplesamlphp_auth_mailattr', 'mail'),
            '#description' => t('Example: <i>mail</i><br />If the user attribute is multivalued, the first value will be used.'),
        ),
        
        'simplesamlphp_auth_rolepopulation' => array(
            '#type' => 'textarea',
            '#title' => t('Automatic role population from simpleSAMLphp attributes'),
            '#default_value' => variable_get('simplesamlphp_auth_rolepopulation', ''),
            '#description' => t('A pipe separated list of rules.<br />Example: <i>roleid1:condition1|roleid2:contition2...</i> <br />For instance: <i>1:eduPersonPrincipalName,@=,uninett.no;affiliation,=,employee|2:mail,=,andreas@uninett.no</i>'),
        ),

	'simplesamlphp_auth_roleevaleverytime' => array(
            '#type' => 'checkbox',
            '#title' => t('Reevaluate roles every time the user logs in.'),
            '#default_value' => variable_get('simplesamlphp_auth_roleevaleverytime', 0),
            '#description' => t('NOTE: This means users could loose any roles that have been assigned manually in Drupal.'),
	),

        'simplesamlphp_auth_forcehttps' => array(
            '#type' => 'checkbox',
            '#title' => t('Force https for login links'),
            '#default_value' => variable_get('simplesamlphp_auth_forcehttps', TRUE),
            '#description' => t('Should be enabled on production sites.'),
        ),
    				
	'simplesamlphp_auth_registerusers' => array(
            '#type' => 'checkbox',
            '#title' => t('Register users'),
            '#default_value' => variable_get('simplesamlphp_auth_registerusers', TRUE),
            '#description' => t('Decides wether or not the module should create/register new users upon authentication.<br />NOTE: If unchecked each user must already have been provisioned a Drupal account before logging in. Otherwise they will receive a notice and be denied access.'),
        ),
				
	'simplesamlphp_auth_allowdefaultlogin' => array(
            '#type' => 'checkbox',
            '#title' => t('Allow authentication with local Drupal accounts'),
            '#default_value' => variable_get('simplesamlphp_auth_allowdefaultlogin', TRUE),
            '#description' => t('Check this box if you want to let people log in with local Drupal accounts (without using simpleSAMLphp). If you want to restrict this privilege to certain users you can enter the Drupal user IDs in the next field.'),
        ),
        
        'simplesamlphp_auth_allowdefaultloginusers' => array(
            '#type' => 'textfield',
            '#title' => t('Which users should be allowed to login with local accounts?'),
            '#default_value' => variable_get('simplesamlphp_auth_allowdefaultloginusers', ''),
            '#description' => t('Example: <i>1,2,3</i><br />A comma-separated list of user IDs that should be allowed to login without simpleSAMLphp.'),
        ),
    );
    
    return system_settings_form($form);
    
}



/**
* Implementation of hook_form_alter()
*/
function simplesamlphp_auth_form_alter(&$form, $form_state, $form_id) {

    if ($form_id == 'user_login_block') {
        $link =  l('Federated Log In','saml_login'); 
        $links = $form['links']['#markup'];
        $links = str_replace('</ul>','<li class="saml">' . $link  . '</li></ul>',$links);
        $form['links']['#markup'] = $links;
    }


    if ($form_id == 'user_account_form') {
        $link =  l('Federated Log In','saml_login'); 
        $links = $form['links']['#markup'];
        $links = str_replace('</ul>','<li class="saml">' . $link  . '</li></ul>',$links);
        $form['links']['#markup'] = $links;
    }
}




/**
* Implementation of hook_block_view()
*/
function simplesamlphp_auth_block_view($delta = '') {

    switch($delta) {
	    case 0:
		    $block = array('subject' => t('simpleSAMLphp login'),
		    'content' => _simplesamlphp_auth_generate_block_text());
		    break;
    }
    return $block;
}




/**
* Implementation of hook_block_info()
*/
function simplesamlphp_auth_block_info() {

    $block = array(
	array(
		'info' => t('simpleSAMLphp authentication'), 
		'cache'   => DRUPAL_NO_CACHE,
	)
    );
    return $block;
}



/*
--------------------------------------------------------------------------------------------------

*/
function _simplesamlphp_auth_get_authname() {

    global $saml_attributes;
    
    $authname = '';
    
    /* Check if valid local session exists.. */
    if (isset($saml_attributes)) {
        _simplesaml_auth_debug('_simplesamlphp_auth_get_authname: Valid local session exist');
        if (isset($saml_attributes[variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName')])) {
            $authname = $saml_attributes[variable_get('simplesamlphp_auth_unique_id', 'eduPersonPrincipalName')][0];
        } else {
            throw new Exception(t('error in simplesamlphp_auth.module: no valid unique id attribute set'));
        }
    }    
    return $authname;
}



function _simplesamlphp_auth_get_default_name($account) {

   global $as;  
   global $saml_attributes;
     
    $default_name = '';
 
    /* Check if valid local session exists.. */
    if ($as->isAuthenticated() ) {
     
	$auth_user_name_attr = variable_get('simplesamlphp_auth_user_name', 'eduPersonPrincipalName');
	if(!isset($saml_attributes[$auth_user_name_attr]) || !isset($saml_attributes[$auth_user_name_attr][0])) {
	   throw new Exception(t('There was no attribute named '.$auth_user_name_attr.' set for your user.'));
	}

    	$default_name = $saml_attributes[$auth_user_name_attr][0];
    
    }
    return $default_name;
}




function _simplesamlphp_auth_get_mail() {

    global $as;
    global $saml_attributes;
    $mail_address = '';
    /* Check if valid local session exists.. */
    if ($as->isAuthenticated()) {
        if (isset($saml_attributes[variable_get('simplesamlphp_auth_mailattr', 'mail')])) {
            $mail_address = $saml_attributes[variable_get('simplesamlphp_auth_mailattr', 'mail')][0];
        } else {
            throw new Exception(t('error in simplesamlphp_auth.module: no valid mail attribute set'));
        }    
    }
 
    return $mail_address;
}




function _simplesamlphp_auth_forcehttps_rewrite($url) {

    if (variable_get('simplesamlphp_auth_forcehttps', TRUE)) {
      $url = str_replace('http://', 'https://', $url);
      _simplesaml_auth_debug('forcehttps rewrite: '.$url);
    } 
    
    return $url;
}




function _simplesamlphp_auth_generate_block_text() {

    global $as;
    $block_content = '';
    global $user;
   
    /* Check if valid local session exists.. */
    if ($as->isAuthenticated()) {
        $block_content .= '<p>Logged in as: '. $user->name . '<br />'. l('Log Out','user/logout'). '</a></p>';
    } else {	
        $block_content .= '<p>'.l('Federated Log In','saml_login').'</p>';
    }
    
    return $block_content;
}



function _simplesamlphp_auth_evaulaterolerule($roleruleevaluation, $attributes) {
 
    _simplesaml_auth_debug('Evaluate rule (key=' . $roleruleevaluation[0]  . ',operator=' . $roleruleevaluation[1] . ',value=' . $roleruleevaluation[2] . ')');
 
    if (!array_key_exists($roleruleevaluation[0], $attributes)) return false;
    $attribute = $attributes[$roleruleevaluation[0]];
    
    switch($roleruleevaluation[1]) {
        case '=' :
            return in_array($roleruleevaluation[2], $attribute);
        
        case '@=' :
            $dc = explode('@', $attribute[0]);
            if (count($dc) != 2) return false;
            return ($dc[1] == $roleruleevaluation[2]);
    }
 
    return false;
 }



 function _simplesamlphp_auth_rolepopulation($rolemap) {
 
     global $as; 
     global $saml_attributes;
     $roles = array();
 
     _simplesaml_auth_debug('Rolemap: ' . $rolemap);
 
     /* Check if valid local session exists.. */
     if ($as->isAuthenticated()) {
         $attributes = $saml_attributes; 
        
         if (empty($rolemap)) return $roles;
         
         _simplesaml_auth_debug('Evaluate rolemap: ' . $rolemap);
         
         $rolerules = explode('|', $rolemap);
         
         foreach($rolerules AS $rolerule) {
         
             _simplesaml_auth_debug('Evaluate role rule: ' . $rolerule);
         
             $roleruledecompose = explode(':', $rolerule);
             
             $roleid = $roleruledecompose[0];
             $roleruleevaluations = explode(';', $roleruledecompose[1]);
             
     
             $addnew = true;
             foreach ($roleruleevaluations AS $roleruleevaluation) {
             
                 _simplesaml_auth_debug('Evaluate rule evaulation: ' . $roleruleevaluation);
                 
                 $roleruleevaluationdc = explode(',', $roleruleevaluation);
                 if (!_simplesamlphp_auth_evaulaterolerule($roleruleevaluationdc, $attributes)) $addnew = false;
             }
             if ($addnew) {
                 $roles[$roleid] = $roleid;
                 _simplesaml_auth_debug('Add new role: ' . $roleid);
             }
             
         }
    }
    return $roles;
 }



/**
 * This helper function is used by developers to debug the form API workflow in this module.
 * Uncomment the function body to activate.
 */
function _simplesaml_auth_debug($message) {

  watchdog('simplesamlphp', $message, NULL, WATCHDOG_DEBUG);
}



/**
 * Implementation of hook_exit().
 */
function simplesamlphp_auth_exit() {
    /*
    if (!empty($_GET['destination']) && arg(0) != 'logout' && arg(0) != 'saml_login') {
    print '<pre>';
    global $saml_attributes;
    print_r($saml_attributes);
    print_r($_COOKIE);
    print_r($_SESSION);
    print_r($_SERVER);
    print '</pre>';
    }
    */
}



/**
 * Helper function for logging out a user that is has a active session in Drupal but not with simpleSAML.
 */
function _simplesamlphp_auth_destroy_drupal_session(){
    global $user;

    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

    // Destroy the current session:
    session_destroy();
    // Only variables can be passed by reference workaround.
    $null = NULL;
    user_module_invoke('logout', $null, $user);

    // Load the anonymous user
    $user = drupal_anonymous_user();

    drupal_goto();
}
